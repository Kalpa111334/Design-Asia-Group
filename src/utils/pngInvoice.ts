type TaskRow = {
  id: string;
  title: string;
  status: string;
  priority: string;
  created_at: string;
  due_date?: string | null;
  completed_at?: string | null;
};

interface ExportOptions {
  title?: string;
  subtitle?: string;
  quality?: number; // 0.1 to 1.0, default 0.95
  scale?: number; // For high DPI, default 2
}

export function downloadTasksInvoicePng(
  filename: string, 
  rows: TaskRow[], 
  opts?: ExportOptions
) {
  if (!rows || rows.length === 0) return;

  const title = opts?.title || 'Weekly Task Invoice';
  const subtitle = opts?.subtitle || new Date().toLocaleString();
  const quality = opts?.quality || 0.95;
  const scale = opts?.scale || 2; // High DPI scaling

  const cols = [
    { key: 'id', label: 'ID', x: 24, width: 120 },
    { key: 'title', label: 'Title', x: 150, width: 320 },
    { key: 'status', label: 'Status', x: 480, width: 110 },
    { key: 'priority', label: 'Priority', x: 600, width: 90 },
    { key: 'created_at', label: 'Created', x: 700, width: 150 },
    { key: 'due_date', label: 'Due', x: 860, width: 150 },
  ] as const;

  const rowHeight = 24;
  const headerHeight = 140;
  const footerHeight = 60;
  const bodyHeight = rows.length * rowHeight;
  const width = 1024;
  const height = headerHeight + bodyHeight + footerHeight;

  // Create canvas with high DPI scaling
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  if (!ctx) return;

  canvas.width = width * scale;
  canvas.height = height * scale;
  ctx.scale(scale, scale);

  // Set high-quality rendering
  ctx.imageSmoothingEnabled = true;
  ctx.imageSmoothingQuality = 'high';
  ctx.textRenderingOptimization = 'optimizeQuality';

  // Background
  ctx.fillStyle = '#FFFFFF';
  ctx.fillRect(0, 0, width, height);

  // Header background
  ctx.fillStyle = '#0F172A';
  ctx.fillRect(0, 0, width, 110);

  // Header text
  ctx.fillStyle = '#FFFFFF';
  ctx.font = 'bold 26px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText('TaskVision', 24, 48);

  ctx.font = '16px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText(title, 24, 80);

  ctx.fillStyle = '#94A3B8';
  ctx.font = '12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText(subtitle, 24, 102);

  // Table header background
  const tableHeaderY = headerHeight - 16;
  ctx.fillStyle = '#F8FAFC';
  ctx.fillRect(0, tableHeaderY, width, 32);

  // Table header text
  ctx.fillStyle = '#0F172A';
  ctx.font = '600 12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  cols.forEach(col => {
    ctx.fillText(col.label, col.x, tableHeaderY + 22);
  });

  // Table body
  rows.forEach((row, i) => {
    const y = headerHeight + i * rowHeight;
    const bg = i % 2 === 0 ? '#FFFFFF' : '#F8FAFC';
    
    // Row background
    ctx.fillStyle = bg;
    ctx.fillRect(0, y, width, rowHeight);

    // Row text
    ctx.fillStyle = '#0F172A';
    ctx.font = '12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
    
    const cells = [
      row.id.slice(0, 8),
      row.title.length > 36 ? row.title.slice(0, 33) + '…' : row.title,
      row.status.replace('_', ' '),
      row.priority,
      row.created_at,
      row.due_date || '',
    ];

    cells.forEach((cell, cellIndex) => {
      ctx.fillText(cell, cols[cellIndex].x, y + 16);
    });
  });

  // Footer background
  ctx.fillStyle = '#FFFFFF';
  ctx.fillRect(0, height - footerHeight, width, footerHeight);

  // Footer text
  ctx.fillStyle = '#64748B';
  ctx.font = '12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText(`Generated by TaskVision • ${new Date().toLocaleString()}`, 24, height - 24);

  // Convert to PNG and download
  canvas.toBlob((blob) => {
    if (!blob) return;

    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename.endsWith('.png') ? filename : `${filename}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }, 'image/png', quality);
}

// Portrait format export function
export function downloadTasksInvoicePngPortrait(
  filename: string, 
  rows: TaskRow[], 
  opts?: ExportOptions
) {
  if (!rows || rows.length === 0) return;

  const title = opts?.title || 'Weekly Task Invoice';
  const subtitle = opts?.subtitle || new Date().toLocaleString();
  const quality = opts?.quality || 0.95;
  const scale = opts?.scale || 2; // High DPI scaling

  // Portrait layout - A4 ratio (8.5" x 11")
  const cols = [
    { key: 'id', label: 'ID', x: 20, width: 80 },
    { key: 'title', label: 'Title', x: 110, width: 200 },
    { key: 'status', label: 'Status', x: 320, width: 80 },
    { key: 'priority', label: 'Priority', x: 410, width: 70 },
    { key: 'created_at', label: 'Created', x: 490, width: 120 },
    { key: 'due_date', label: 'Due', x: 620, width: 120 },
  ] as const;

  const rowHeight = 28; // Slightly taller rows for better readability
  const headerHeight = 180; // Taller header for portrait
  const footerHeight = 80; // Taller footer
  const bodyHeight = rows.length * rowHeight;
  const width = 750; // Portrait width (A4 ratio)
  const height = headerHeight + bodyHeight + footerHeight;

  // Create canvas with high DPI scaling
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  if (!ctx) return;

  canvas.width = width * scale;
  canvas.height = height * scale;
  ctx.scale(scale, scale);

  // Set high-quality rendering
  ctx.imageSmoothingEnabled = true;
  ctx.imageSmoothingQuality = 'high';
  ctx.textRenderingOptimization = 'optimizeQuality';

  // Background
  ctx.fillStyle = '#FFFFFF';
  ctx.fillRect(0, 0, width, height);

  // Header background
  ctx.fillStyle = '#0F172A';
  ctx.fillRect(0, 0, width, 140);

  // Header text - larger for portrait
  ctx.fillStyle = '#FFFFFF';
  ctx.font = 'bold 32px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText('TaskVision', 20, 50);

  ctx.font = '20px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText(title, 20, 85);

  ctx.fillStyle = '#94A3B8';
  ctx.font = '14px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText(subtitle, 20, 110);

  // Add a decorative line
  ctx.strokeStyle = '#3B82F6';
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(20, 125);
  ctx.lineTo(width - 20, 125);
  ctx.stroke();

  // Table header background
  const tableHeaderY = headerHeight - 20;
  ctx.fillStyle = '#F8FAFC';
  ctx.fillRect(0, tableHeaderY, width, 36);

  // Table header text
  ctx.fillStyle = '#0F172A';
  ctx.font = '600 13px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  cols.forEach(col => {
    ctx.fillText(col.label, col.x, tableHeaderY + 24);
  });

  // Table body
  rows.forEach((row, i) => {
    const y = headerHeight + i * rowHeight;
    const bg = i % 2 === 0 ? '#FFFFFF' : '#F8FAFC';
    
    // Row background
    ctx.fillStyle = bg;
    ctx.fillRect(0, y, width, rowHeight);

    // Row text
    ctx.fillStyle = '#0F172A';
    ctx.font = '12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
    
    const cells = [
      row.id.slice(0, 8),
      row.title.length > 20 ? row.title.slice(0, 17) + '…' : row.title,
      row.status.replace('_', ' '),
      row.priority,
      row.created_at.length > 15 ? row.created_at.slice(0, 12) + '…' : row.created_at,
      row.due_date ? (row.due_date.length > 15 ? row.due_date.slice(0, 12) + '…' : row.due_date) : '',
    ];

    cells.forEach((cell, cellIndex) => {
      ctx.fillText(cell, cols[cellIndex].x, y + 18);
    });
  });

  // Footer background
  ctx.fillStyle = '#FFFFFF';
  ctx.fillRect(0, height - footerHeight, width, footerHeight);

  // Footer text
  ctx.fillStyle = '#64748B';
  ctx.font = '12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText(`Generated by TaskVision • ${new Date().toLocaleString()}`, 20, height - 30);

  // Add page border for professional look
  ctx.strokeStyle = '#E2E8F0';
  ctx.lineWidth = 1;
  ctx.strokeRect(0, 0, width, height);

  // Convert to PNG and download
  canvas.toBlob((blob) => {
    if (!blob) return;

    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename.endsWith('.png') ? filename : `${filename}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }, 'image/png', quality);
}

// Alternative function for generating PNG with custom styling
export function downloadTasksInvoicePngStyled(
  filename: string,
  rows: TaskRow[],
  opts?: ExportOptions & {
    theme?: 'light' | 'dark';
    colors?: {
      primary?: string;
      secondary?: string;
      background?: string;
      text?: string;
    };
  }
) {
  if (!rows || rows.length === 0) return;

  const title = opts?.title || 'Weekly Task Invoice';
  const subtitle = opts?.subtitle || new Date().toLocaleString();
  const quality = opts?.quality || 0.95;
  const scale = opts?.scale || 2;
  const theme = opts?.theme || 'light';

  // Theme colors
  const colors = {
    primary: opts?.colors?.primary || (theme === 'dark' ? '#3B82F6' : '#0F172A'),
    secondary: opts?.colors?.secondary || (theme === 'dark' ? '#1E293B' : '#F8FAFC'),
    background: opts?.colors?.background || (theme === 'dark' ? '#0F172A' : '#FFFFFF'),
    text: opts?.colors?.text || (theme === 'dark' ? '#F1F5F9' : '#0F172A'),
    ...opts?.colors
  };

  const cols = [
    { key: 'id', label: 'ID', x: 24, width: 120 },
    { key: 'title', label: 'Title', x: 150, width: 320 },
    { key: 'status', label: 'Status', x: 480, width: 110 },
    { key: 'priority', label: 'Priority', x: 600, width: 90 },
    { key: 'created_at', label: 'Created', x: 700, width: 150 },
    { key: 'due_date', label: 'Due', x: 860, width: 150 },
  ] as const;

  const rowHeight = 24;
  const headerHeight = 140;
  const footerHeight = 60;
  const bodyHeight = rows.length * rowHeight;
  const width = 1024;
  const height = headerHeight + bodyHeight + footerHeight;

  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  if (!ctx) return;

  canvas.width = width * scale;
  canvas.height = height * scale;
  ctx.scale(scale, scale);

  ctx.imageSmoothingEnabled = true;
  ctx.imageSmoothingQuality = 'high';
  ctx.textRenderingOptimization = 'optimizeQuality';

  // Background
  ctx.fillStyle = colors.background;
  ctx.fillRect(0, 0, width, height);

  // Header background
  ctx.fillStyle = colors.primary;
  ctx.fillRect(0, 0, width, 110);

  // Header text
  ctx.fillStyle = theme === 'dark' ? colors.text : '#FFFFFF';
  ctx.font = 'bold 26px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText('TaskVision', 24, 48);

  ctx.font = '16px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText(title, 24, 80);

  ctx.fillStyle = theme === 'dark' ? '#94A3B8' : '#94A3B8';
  ctx.font = '12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText(subtitle, 24, 102);

  // Table header background
  const tableHeaderY = headerHeight - 16;
  ctx.fillStyle = colors.secondary;
  ctx.fillRect(0, tableHeaderY, width, 32);

  // Table header text
  ctx.fillStyle = colors.text;
  ctx.font = '600 12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  cols.forEach(col => {
    ctx.fillText(col.label, col.x, tableHeaderY + 22);
  });

  // Table body
  rows.forEach((row, i) => {
    const y = headerHeight + i * rowHeight;
    const bg = i % 2 === 0 ? colors.background : colors.secondary;
    
    ctx.fillStyle = bg;
    ctx.fillRect(0, y, width, rowHeight);

    ctx.fillStyle = colors.text;
    ctx.font = '12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
    
    const cells = [
      row.id.slice(0, 8),
      row.title.length > 36 ? row.title.slice(0, 33) + '…' : row.title,
      row.status.replace('_', ' '),
      row.priority,
      row.created_at,
      row.due_date || '',
    ];

    cells.forEach((cell, cellIndex) => {
      ctx.fillText(cell, cols[cellIndex].x, y + 16);
    });
  });

  // Footer
  ctx.fillStyle = colors.background;
  ctx.fillRect(0, height - footerHeight, width, footerHeight);

  ctx.fillStyle = theme === 'dark' ? '#64748B' : '#64748B';
  ctx.font = '12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText(`Generated by TaskVision • ${new Date().toLocaleString()}`, 24, height - 24);

  canvas.toBlob((blob) => {
    if (!blob) return;

    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename.endsWith('.png') ? filename : `${filename}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }, 'image/png', quality);
}

// Portrait format export function
export function downloadTasksInvoicePngPortrait(
  filename: string, 
  rows: TaskRow[], 
  opts?: ExportOptions
) {
  if (!rows || rows.length === 0) return;

  const title = opts?.title || 'Weekly Task Invoice';
  const subtitle = opts?.subtitle || new Date().toLocaleString();
  const quality = opts?.quality || 0.95;
  const scale = opts?.scale || 2; // High DPI scaling

  // Portrait layout - A4 ratio (8.5" x 11")
  const cols = [
    { key: 'id', label: 'ID', x: 20, width: 80 },
    { key: 'title', label: 'Title', x: 110, width: 200 },
    { key: 'status', label: 'Status', x: 320, width: 80 },
    { key: 'priority', label: 'Priority', x: 410, width: 70 },
    { key: 'created_at', label: 'Created', x: 490, width: 120 },
    { key: 'due_date', label: 'Due', x: 620, width: 120 },
  ] as const;

  const rowHeight = 28; // Slightly taller rows for better readability
  const headerHeight = 180; // Taller header for portrait
  const footerHeight = 80; // Taller footer
  const bodyHeight = rows.length * rowHeight;
  const width = 750; // Portrait width (A4 ratio)
  const height = headerHeight + bodyHeight + footerHeight;

  // Create canvas with high DPI scaling
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  if (!ctx) return;

  canvas.width = width * scale;
  canvas.height = height * scale;
  ctx.scale(scale, scale);

  // Set high-quality rendering
  ctx.imageSmoothingEnabled = true;
  ctx.imageSmoothingQuality = 'high';
  ctx.textRenderingOptimization = 'optimizeQuality';

  // Background
  ctx.fillStyle = '#FFFFFF';
  ctx.fillRect(0, 0, width, height);

  // Header background
  ctx.fillStyle = '#0F172A';
  ctx.fillRect(0, 0, width, 140);

  // Header text - larger for portrait
  ctx.fillStyle = '#FFFFFF';
  ctx.font = 'bold 32px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText('TaskVision', 20, 50);

  ctx.font = '20px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText(title, 20, 85);

  ctx.fillStyle = '#94A3B8';
  ctx.font = '14px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText(subtitle, 20, 110);

  // Add a decorative line
  ctx.strokeStyle = '#3B82F6';
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(20, 125);
  ctx.lineTo(width - 20, 125);
  ctx.stroke();

  // Table header background
  const tableHeaderY = headerHeight - 20;
  ctx.fillStyle = '#F8FAFC';
  ctx.fillRect(0, tableHeaderY, width, 36);

  // Table header text
  ctx.fillStyle = '#0F172A';
  ctx.font = '600 13px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  cols.forEach(col => {
    ctx.fillText(col.label, col.x, tableHeaderY + 24);
  });

  // Table body
  rows.forEach((row, i) => {
    const y = headerHeight + i * rowHeight;
    const bg = i % 2 === 0 ? '#FFFFFF' : '#F8FAFC';
    
    // Row background
    ctx.fillStyle = bg;
    ctx.fillRect(0, y, width, rowHeight);

    // Row text
    ctx.fillStyle = '#0F172A';
    ctx.font = '12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
    
    const cells = [
      row.id.slice(0, 8),
      row.title.length > 20 ? row.title.slice(0, 17) + '…' : row.title,
      row.status.replace('_', ' '),
      row.priority,
      row.created_at.length > 15 ? row.created_at.slice(0, 12) + '…' : row.created_at,
      row.due_date ? (row.due_date.length > 15 ? row.due_date.slice(0, 12) + '…' : row.due_date) : '',
    ];

    cells.forEach((cell, cellIndex) => {
      ctx.fillText(cell, cols[cellIndex].x, y + 18);
    });
  });

  // Footer background
  ctx.fillStyle = '#FFFFFF';
  ctx.fillRect(0, height - footerHeight, width, footerHeight);

  // Footer text
  ctx.fillStyle = '#64748B';
  ctx.font = '12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  ctx.fillText(`Generated by TaskVision • ${new Date().toLocaleString()}`, 20, height - 30);

  // Add page border for professional look
  ctx.strokeStyle = '#E2E8F0';
  ctx.lineWidth = 1;
  ctx.strokeRect(0, 0, width, height);

  // Convert to PNG and download
  canvas.toBlob((blob) => {
    if (!blob) return;

    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename.endsWith('.png') ? filename : `${filename}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }, 'image/png', quality);
}
